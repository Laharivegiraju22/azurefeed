trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: pythonfeed

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install --upgrade pip
    pip install --upgrade setuptools wheel twine keyring artifacts-keyring build
  displayName: 'Install Packaging Tools'

- script: |
    echo "Creating .pypirc with authentication..."
    cat <<EOF > ~/.pypirc
    [distutils]
    index-servers =
        privatefeed
        pypublicfeed

    [privatefeed]
    repository = https://pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/pypi/upload/
    username = __token__
    password = $PRIVATE_PAT_TOKEN

    [pypublicfeed]
    repository = https://pkgs.dev.azure.com/SailahariVegiraju/_packaging/pypublicfeed/pypi/upload/
    username = __token__
    password = $PUBLIC_PAT_TOKEN
    EOF
    chmod 600 ~/.pypirc
  displayName: 'Generate .pypirc File'
  env:
    PRIVATE_PAT_TOKEN: $(private_pat_token)
    PUBLIC_PAT_TOKEN: $(public_pat_token) 

# - script: |
#     echo "Clearing previous pip cache..."
#     pip cache purge
#   displayName: 'Clear Pip Cache'

# - script: |
#     echo "Installing dependencies to cache them in the public feed..."
#     pip install --no-cache-dir -r requirements.txt --index-url https://$(private_pat_token)@pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/pypi/simple/ --extra-index-url https://$(public_pat_token)@pkgs.dev.azure.com/SailahariVegiraju/_packaging/pypublicfeed/pypi/simple/
#   displayName: 'Cache Dependencies'

- script: |
    echo "Building the package..."
    python setup.py sdist bdist_wheel
  displayName: 'Build Package'

- task: Bash@3
  displayName: 'Install Trivy'
  inputs:
    targetType: 'inline'
    script: |
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Run Trivy security scan on the built package
- script: |
    echo "Running Trivy scan on built package..."
    trivy fs . --severity CRITICAL,HIGH --exit-code 1
  displayName: 'Trivy Security Scan'
  continueOnError: false # Fails the pipeline if vulnerabilities are found

- script: |
    echo "Uploading to Private Feed..."
    twine upload --verbose --repository privatefeed dist/*
  displayName: 'Upload to Azure Artifacts'

- task: Docker@2
  displayName: Build Docker image with feed debug
  inputs:
    command: build
    Dockerfile: 'Dockerfile'
    tags: |
      azure-debug:$(Build.BuildId)
    buildContext: .
    arguments: --build-arg AZURE_DEVOPS_PAT=$(public_pat_token)  


    - script: |
        dotnet nuget push $(Build.ArtifactStagingDirectory)/*.nupkg \
          --api-key $(NUGET_PAT) \
          --source https://pkgs.dev.azure.com/<org>/_packaging/<feed>/nuget/v3/index.json \
          --skip-duplicate
      displayName: 'Push to Private Feed'
      env:
        NUGET_PAT: $(NUGET_PAT)

trigger:
- main  # or your branch of choice

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: pythonfeed 

jobs:
- job: buildAndPush
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '9.x'  # Replace with .NET SDK version you want
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: NuGetToolInstaller@1

  - task: NuGetAuthenticate@1
    inputs:
      feedsToAuthenticate: 'SailahariVegiraju/Artifactfeedtest'  # Adjust to your org/project/feed

  - script: |
      dotnet restore
      dotnet build -c Release
      dotnet pack -c Release -o ./nupkg
      dotnet nuget push ./nupkg/*.nupkg --source "https://pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/nuget/v3/index.json" --api-key "AzureDevOps" --skip-duplicate
    displayName: "Restore, Build, Pack, and Push"




  - task: NuGetToolInstaller@1

  - task: NuGetAuthenticate@1
    inputs:
      feedsToAuthenticate: 'SailahariVegiraju/Artifactfeedtest'  # Adjust to your org/project/feed

  - script: |
      echo "Restoring .nupkg from Azure Artifacts Feed..."
      dotnet restore --source https://pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/nuget/v3/index.json
    displayName: 'Restore NuGet Package from Azure Artifacts Feed'

  - script: |
      echo "Deploying to Azure Web App..."
      dotnet publish --configuration Release --output $(Build.ArtifactStagingDirectory)/publish  # Publish for deployment
    displayName: 'Deploy Web App to Azure'

  - task: AzureRmWebAppDeployment@5
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'Sailahari-Vis-Prof-Sub(677e2958-8c03-4ec0-9cb2-a8f3d7a4b5ec)'
      appType: 'webApp'
      WebAppName: 'feeddotnetapp'
      packageForLinux: '$(Build.ArtifactStagingDirectory)/publish'
     

  # - script: |
  #     # Set environment variable for Credential Provider
  #     export NUGET_CREDENTIALPROVIDERS_PATH=$(Agent.ToolsDirectory)/artifact-cred-provider

  #     # Restore the NuGet package dependencies
  #     dotnet restore

  #     # Build the project
  #     dotnet build --configuration Release

  #     # Pack the NuGet package
  #     dotnet pack --configuration Release

  #     # Push the NuGet package to Azure Artifacts
  #     dotnet nuget push $(Build.SourcesDirectory)/bin/Release/*.nupkg \
  #       --source "https://pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/nuget/v3/index.json" \
  #       --api-key $(PRIVATE_PAT_TOKEN)  # Uses built-in token for authentication
  #   displayName: 'Restore, Build, Pack, and Push NuGet Package'

  # - task: PublishPipelineArtifact@1
  #   inputs:
  #     artifactName: 'drop'
  #     targetPath: '$(Build.ArtifactStagingDirectory)'

