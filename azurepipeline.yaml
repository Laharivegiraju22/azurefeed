trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: pythonfeed

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install --upgrade pip
    pip install --upgrade setuptools wheel twine keyring artifacts-keyring build
  displayName: 'Install Packaging Tools'

- script: |
    echo "Creating .pypirc with authentication..."
    cat <<EOF > ~/.pypirc
    [distutils]
    index-servers =
        privatefeed
        pypublicfeed

    [privatefeed]
    repository = https://pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/pypi/upload/
    username = __token__
    password = $PRIVATE_PAT_TOKEN

    [pypublicfeed]
    repository = https://pkgs.dev.azure.com/SailahariVegiraju/_packaging/pypublicfeed/pypi/upload/
    username = __token__
    password = $PUBLIC_PAT_TOKEN
    EOF
    chmod 600 ~/.pypirc
  displayName: 'Generate .pypirc File'
  env:
    PRIVATE_PAT_TOKEN: $(private_pat_token)
    PUBLIC_PAT_TOKEN: $(public_pat_token) 

# - script: |
#     echo "Clearing previous pip cache..."
#     pip cache purge
#   displayName: 'Clear Pip Cache'

# - script: |
#     echo "Installing dependencies to cache them in the public feed..."
#     pip install --no-cache-dir -r requirements.txt --index-url https://$(private_pat_token)@pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/pypi/simple/ --extra-index-url https://$(public_pat_token)@pkgs.dev.azure.com/SailahariVegiraju/_packaging/pypublicfeed/pypi/simple/
#   displayName: 'Cache Dependencies'

- script: |
    echo "Building the package..."
    python setup.py sdist bdist_wheel
  displayName: 'Build Package'

- task: Bash@3
  displayName: 'Install Trivy'
  inputs:
    targetType: 'inline'
    script: |
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Run Trivy security scan on the built package
- script: |
    echo "Running Trivy scan on built package..."
    trivy fs . --severity CRITICAL,HIGH --exit-code 1
  displayName: 'Trivy Security Scan'
  continueOnError: false # Fails the pipeline if vulnerabilities are found

- script: |
    echo "Uploading to Private Feed..."
    twine upload --verbose --repository privatefeed dist/*
  displayName: 'Upload to Azure Artifacts'

- task: Docker@2
  displayName: Build Docker image with feed debug
  inputs:
    command: build
    Dockerfile: 'Dockerfile'
    tags: |
      azure-debug:$(Build.BuildId)
    buildContext: .
    arguments: --build-arg AZURE_DEVOPS_PAT=$(public_pat_token)  