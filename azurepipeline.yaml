trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: pythonfeed

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install --upgrade pip
    pip install --upgrade setuptools wheel twine keyring artifacts-keyring build
  displayName: 'Install Packaging Tools'

- script: |
    echo "Creating .pypirc with authentication..."
    cat <<EOF > ~/.pypirc
    [distutils]
    index-servers =
        privatefeed
        pypublicfeed

    [privatefeed]
    repository = https://pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/pypi/upload/
    username = __token__
    password = $PRIVATE_PAT_TOKEN

    [pypublicfeed]
    repository = https://pkgs.dev.azure.com/SailahariVegiraju/_packaging/pypublicfeed/pypi/upload/
    username = __token__
    password = $PUBLIC_PAT_TOKEN
    EOF
    chmod 600 ~/.pypirc
  displayName: 'Generate .pypirc File'
  env:
    PRIVATE_PAT_TOKEN: $(private_pat_token)
    PUBLIC_PAT_TOKEN: $(public_pat_token) 

# - script: |
#     echo "Clearing previous pip cache..."
#     pip cache purge
#   displayName: 'Clear Pip Cache'

# - script: |
#     echo "Installing dependencies to cache them in the public feed..."
#     pip install --no-cache-dir -r requirements.txt --index-url https://$(private_pat_token)@pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/pypi/simple/ --extra-index-url https://$(public_pat_token)@pkgs.dev.azure.com/SailahariVegiraju/_packaging/pypublicfeed/pypi/simple/
#   displayName: 'Cache Dependencies'

- script: |
    echo "Building the package..."
    python setup.py sdist bdist_wheel
  displayName: 'Build Package'

- task: Bash@3
  displayName: 'Install Trivy'
  inputs:
    targetType: 'inline'
    script: |
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Run Trivy security scan on the built package
- script: |
    echo "Running Trivy scan on built package..."
    trivy fs . --severity CRITICAL,HIGH --exit-code 1
  displayName: 'Trivy Security Scan'
  continueOnError: false # Fails the pipeline if vulnerabilities are found

- script: |
    echo "Uploading to Private Feed..."
    twine upload --verbose --repository privatefeed dist/*
  displayName: 'Upload to Azure Artifacts'

- task: Docker@2
  displayName: Build Docker image with feed debug
  inputs:
    command: build
    Dockerfile: 'Dockerfile'
    tags: |
      azure-debug:$(Build.BuildId)
    buildContext: .
    arguments: --build-arg AZURE_DEVOPS_PAT=$(public_pat_token)  


    - script: |
        dotnet nuget push $(Build.ArtifactStagingDirectory)/*.nupkg \
          --api-key $(NUGET_PAT) \
          --source https://pkgs.dev.azure.com/<org>/_packaging/<feed>/nuget/v3/index.json \
          --skip-duplicate
      displayName: 'Push to Private Feed'
      env:
        NUGET_PAT: $(NUGET_PAT)

trigger:
- main  # or your branch of choice

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: pythonfeed 

jobs:
- job: buildAndPush
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '9.x'  # Replace with .NET SDK version you want
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: NuGetToolInstaller@1

  - task: NuGetAuthenticate@1
    inputs:
      feedsToAuthenticate: 'SailahariVegiraju/Artifactfeedtest'  # Adjust to your org/project/feed

  - script: |
      dotnet restore
      dotnet build --configuration Release
      dotnet publish --configuration Release --output $(Build.ArtifactStagingDirectory)/publish
    displayName: 'Build and Publish App'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(packageName).zip'
      replaceExistingArchive: true
    displayName: 'Create ZIP Package'

  - task: UniversalPackages@0
    inputs:
      command: 'publish'
      publishDirectory: '$(Build.ArtifactStagingDirectory)'
      feedsToUsePublish: 'internal'
      vstsFeedPublish: '44ee4792-8e1e-4158-9cd0-92a58bc92a20/6272e705-a3f2-4a24-a779-3227b4dc1323'
      vstsFeedPackagePublish: 'hello-world-api'
      versionOption: 'minor'
    displayName: 'Publish ZIP to Azure Artifacts Feed'

- job: deploy
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '9.x'  # Replace with .NET SDK version you want
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: NuGetToolInstaller@1

  - task: NuGetAuthenticate@1
    inputs:
      feedsToAuthenticate: 'SailahariVegiraju/Artifactfeedtest' 
  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: '$(System.DefaultWorkingDirectory)'
      feedsToUse: 'internal'
      vstsFeed: '44ee4792-8e1e-4158-9cd0-92a58bc92a20/6272e705-a3f2-4a24-a779-3227b4dc1323'
      vstsFeedPackage: 'cb0dd85a-857a-4936-8cc2-338bb44e4aa3'
      vstsPackageVersion: '0.1.0'
  
  - task: AzureRmWebAppDeployment@5
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'Sailahari-Vis-Prof-Sub(677e2958-8c03-4ec0-9cb2-a8f3d7a4b5ec)'
      appType: 'webApp'
      WebAppName: 'feeddotnetapp'
      packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

  # - script: |
  #     # Set environment variable for Credential Provider
  #     export NUGET_CREDENTIALPROVIDERS_PATH=$(Agent.ToolsDirectory)/artifact-cred-provider

  #     # Restore the NuGet package dependencies
  #     dotnet restore

  #     # Build the project
  #     dotnet build --configuration Release

  #     # Pack the NuGet package
  #     dotnet pack --configuration Release

  #     # Push the NuGet package to Azure Artifacts
  #     dotnet nuget push $(Build.SourcesDirectory)/bin/Release/*.nupkg \
  #       --source "https://pkgs.dev.azure.com/SailahariVegiraju/Artifactfeedtest/_packaging/privatefeed/nuget/v3/index.json" \
  #       --api-key $(PRIVATE_PAT_TOKEN)  # Uses built-in token for authentication
  #   displayName: 'Restore, Build, Pack, and Push NuGet Package'

  # - task: PublishPipelineArtifact@1
  #   inputs:
  #     artifactName: 'drop'
  #     targetPath: '$(Build.ArtifactStagingDirectory)'



  - script: |
      # Config
      FEED_NAME="privatefeed"
      PACKAGE_NAME="hello-world-api"
      ORGANIZATION="SailahariVegiraju"
      PROJECT="Artifactfeedtest"
      VERSION_TO_CHECK="0.3.0"  # Use your target version here
      PAT="$(PRIVATE_PAT_TOKEN)"

      echo "Checking if version $VERSION_TO_CHECK of package $PACKAGE_NAME exists in feed $FEED_NAME..."

      # Get package list and extract package GUID
      PACKAGE_GUID=$(curl -s -u :$PAT \
        "https://feeds.dev.azure.com/$ORGANIZATION/$PROJECT/_apis/packaging/feeds/$FEED_NAME/packages?api-version=7.1-preview.1" \
        | jq -r ".value[] | select(.name==\"$PACKAGE_NAME\") | .id")

      if [ -z "$PACKAGE_GUID" ] || [ "$PACKAGE_GUID" == "null" ]; then
          echo "Package '$PACKAGE_NAME' not found in feed '$FEED_NAME'."
          echo "##vso[task.setvariable variable=skipPublish]false"
          exit 0
      fi

      echo "Found package GUID: $PACKAGE_GUID"

      # Check for version
      VERSION_EXISTS=$(curl -s -u :$PAT \
       "https://feeds.dev.azure.com/$ORGANIZATION/$PROJECT/_apis/packaging/feeds/$FEED_NAME/packages/$PACKAGE_GUID/versions?api-version=7.1-preview.1" \
        | jq -r ".value[]?.version" | grep -Fx "$VERSION_TO_CHECK")

      if [ -n "$VERSION_EXISTS" ]; then
          echo "Version $VERSION_TO_CHECK already exists. Skipping publish."
          echo "##vso[task.setvariable variable=skipPublish]true"
      else
        echo "Version $VERSION_TO_CHECK not found. Proceeding."
        echo "##vso[task.setvariable variable=skipPublish]false"
      fi
    displayName: 'Check if Package Version Exists'


  - task: UniversalPackages@0
    condition: eq(variables['skipPublish'], 'false')
    inputs:
      command: 'publish'
      publishDirectory: '$(Build.ArtifactStagingDirectory)'
      feedsToUsePublish: 'internal'
      vstsFeedPublish: '44ee4792-8e1e-4158-9cd0-92a58bc92a20/6272e705-a3f2-4a24-a779-3227b4dc1323'
      vstsFeedPackagePublish: 'hello-world-api'
      versionOption: 'custom'
      versionPublish: '0.3.0'
    displayName: 'Publish ZIP to Azure Artifacts Feed'

